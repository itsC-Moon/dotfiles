{
	"cp-extension": {
		"prefix": [
			"cpp-cp"
		],
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"#define pn(x) std::cout << #x << ' ' << x",
			"#define pnl(x) std::cout << #x << ' ' << x << '\\n'",
			"#define p(x) std::cout << x",
			"#define pl(x) std::cout << x << '\\n'",
			"#define r(x) std::cin >> x;",
			"using ll = long long;",
			"void solve()",
			"{",
			"\t$1",
			"}",
			"int main()",
			"{",
			"\tstd::ios_base::sync_with_stdio(false);",
			"\tstd::cin.tie(NULL);",
			"\tint t;",
			"\tstd::cin >> t;",
			"\twhile(t--)",
			"\t{\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
		],
		"description": "Default cpp code for CP"
	},
	"Header protection": {
		"prefix": "ifndef",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"# define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"$2",
			"",
			"#endif"
		],
		"description": "Log output to console"
	},
	"Orthodox Canonical": {
		"prefix": "makeclass",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}",
			"{",
			"public:",
			"\t${TM_FILENAME_BASE/(.*)/${1:/upcase}/}();",
			"\t${TM_FILENAME_BASE/(.*)/${1:/upcase}/}(${TM_FILENAME_BASE/(.*)/${1:/upcase}/} &${TM_FILENAME_BASE/(.*)/${1:/uppcase}/});",
			"};"
		],
		"description": "Log output to console"
	},
	"vector": {
		"prefix": "vec",
		"body": [
			"std::vector<${1:int}> ${2:vec}(${3:n});"
		],
		"description": "vector"
	},
	"umap": {
		"prefix": "umap",
		"body": [
			"std::unordered_map<${1:int}, ${2:int}> ${3:map};"
		],
		"description": "vector"
	},
	"uset": {
		"prefix": "uset",
		"body": [
			"std::unordered_set<${1:int}> ${2:set};"
		]
	},
	"ifor": {
		"prefix": "ifor",
		"body": [
			"for(int ${1:i} = 0; ${1} < ${2:n};${1}++)",
			"{",
			"$3",
			"}"
		],
		"description": "set"
	},
	"rvec": {
		"prefix": "rvec",
		"body": [
			"for(auto &it : ${1:vec}) std::cin >> it;"
		],
		"description": "read fix size vector"
	},
	"print vector": {
		"prefix": "pvec",
		"body": [
			"for (auto &${1:it} : ${2:vec}) std::cout << ${1} << ' ';",
			"std::cout << std::endl;"
		],
		"description": "print vector"
	},
	"sort vector": {
		"prefix": "svec",
		"body": [
			"std::sort(${1:vec}.begin(), ${1}.end());"
		],
		"description": "sort vector"
	}
}
